name: Build and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  build_linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - i686-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - powerpc64le-unknown-linux-gnu
          - riscv64gc-unknown-linux-gnu
          - s390x-unknown-linux-gnu
          - x86_64-unknown-freebsd
          - x86_64-unknown-illumos
          - armv7-unknown-linux-gnueabihf

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib

      - name: Build
        run: |
          cargo install cross
          cross build --release --target ${{ matrix.target }}

      - name: Archive binary
        run: |
          mkdir -p artifacts/${{ matrix.target }}
          cp target/${{ matrix.target }}/release/swu_network_custom_login artifacts/${{ matrix.target }}/
          cd artifacts/${{ matrix.target }}
          tar -czvf ../../${{ matrix.target }}.tar.gz *
          cd ../../

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: ${{ matrix.target }}.tar.gz

  build_macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        run: rustup target add ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Archive binary
        run: |
          mkdir -p artifacts/${{ matrix.target }}
          cp target/${{ matrix.target }}/release/swu_network_custom_login artifacts/${{ matrix.target }}/
          cd artifacts/${{ matrix.target }}
          tar -czvf ../../${{ matrix.target }}.tar.gz *
          cd ../../

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: ${{ matrix.target }}.tar.gz

  build_windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - i686-pc-windows-msvc
          - aarch64-pc-windows-msvc
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Archive binary
        shell: pwsh
        run: |
          New-Item -Path "artifacts" -ItemType Directory -Force
          New-Item -Path "artifacts/${{ matrix.target }}" -ItemType Directory -Force
          if ("${{ matrix.target }}" -like "*windows*") {
            Copy-Item "target/${{ matrix.target }}/release/swu_network_custom_login.exe" -Destination "artifacts/${{ matrix.target }}/"
            Compress-Archive -Path "artifacts/${{ matrix.target }}/*" -DestinationPath "${{ matrix.target }}.zip"
          } else {
            Copy-Item "target/${{ matrix.target }}/release/swu_network_custom_login" -Destination "artifacts/${{ matrix.target }}/"
            tar -czvf "${{ matrix.target }}.tar.gz" -C "artifacts/${{ matrix.target }}" .
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: ${{ matrix.target }}.tar.gz

  release:
    needs:
      - build_linux
      - build_macos
      - build_windows
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "artifacts/**/*.tar.gz"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            # ðŸš€ New Release: SWU Network Custom Login Client V${{ github.ref_name }}

            We are excited to announce the latest release of **SWU Network Custom Login Client**, a lightweight, customizable network login client that supports a wide range of platforms and architectures. This version introduces enhanced multi-platform support, stability improvements, and bug fixes.

            ## ðŸŒŸ Key Features

            - **Automatic Network Detection**: Seamlessly monitors and detects network connectivity, initiating login when necessary.
            - **Password Encryption**: Ensures secure login by encrypting passwords when needed.
            - **Multi-Platform Support**: Precompiled binaries available for **Windows**, **macOS**, **Linux**, and **OpenWRT** devices.
            - **Lightweight and Efficient**: Optimized for minimal resource consumption, perfect for devices with limited capabilities.

            ## ðŸ“¥ Downloads

            Download the appropriate binary for your platform below. Each binary is packaged as a `.tar.gz` file. Extract it and run the executable.

            | Platform         | Architecture       | Download Link                                                                                                                                     |
            |------------------|--------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|
            | **Windows**      | x86_64             | [Download](${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/x86_64-pc-windows-msvc.zip)                 |
            |                  | x86                | [Download](${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/i686-pc-windows-msvc.zip)                   |
            |                  | ARM64              | [Download](${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/aarch64-pc-windows-msvc.zip)                |
            | **macOS**        | x86_64             | [Download](${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/x86_64-apple-darwin.tar.gz)                 |
            |                  | ARM64              | [Download](${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/aarch64-apple-darwin.tar.gz)                |
            | **Linux**        | x86_64             | [Download](${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/x86_64-unknown-linux-gnu.tar.gz)            |
            |                  | x86                | [Download](${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/i686-unknown-linux-gnu.tar.gz)              |
            |                  | ARM64              | [Download](${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/aarch64-unknown-linux-gnu.tar.gz)           |
            |                  | Armv7              | [Download](${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/armv7-unknown-linux-gnueabihf.tar.gz)       |
            |                  | PowerPC64          | [Download](${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/powerpc64le-unknown-linux-gnu.tar.gz)       |
            |                  | RISC-V64           | [Download](${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/riscv64gc-unknown-linux-gnu.tar.gz)         |
            |                  | S390x              | [Download](${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/s390x-unknown-linux-gnu.tar.gz)             |
            | **FreeBSD**      | x86_64             | [Download](${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/x86_64-unknown-freebsd.tar.gz)              |
            | **Illumos**      | x86_64             | [Download](${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/x86_64-unknown-illumos.tar.gz)              |

            > ðŸ’¡ **Tip**: Need help choosing the correct version? Refer to the platform's architecture you're running on or consult the [Supported Platforms](#supported-platforms) section below.

            ## ðŸš€ How to Install

            1. **Download**: Click on the download link for your platform from the table above.
            2. **Extract**: Use the following command to extract the downloaded `.tar.gz` or `.zip` file:
              ```bash
              tar -xzvf swu_network_custom_login.tar.gz
              ```
              or, for `.zip` files (Windows):
              ```powershell
              Expand-Archive -Path swu_network_custom_login.zip -DestinationPath .\
              ```
            3. Run: Execute the binary:
              ```bash
              ./swu_network_custom_login
              ```
            ## Supported Platforms
            This release supports the following platforms:

            - **Windows:** x86, x86_64, ARM64
            - **macOS:** x86_64, ARM64 (Apple Silicon)
            - **Linux:** x86, x86_64, ARM64, PowerPC64, RISC-V64, S390x, Armv7
            - **FreeBSD:** x86_64
            - **Illumos:** x86_64
          draft: false
          replacesArtifacts: true
          prerelease: false

name: Build and Release

on:
  release:
    types: [created]

jobs:
  build_linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - i686-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - loongarch64-unknown-linux-gnu
          - mips64-unknown-linux-gnuabi64
          - powerpc64le-unknown-linux-gnu
          - riscv64gc-unknown-linux-gnu
          - s390x-unknown-linux-gnu
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib
          if [ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          elif [ "${{ matrix.target }}" == "i686-unknown-linux-gnu" ]; then
            sudo apt-get install -y gcc-multilib
          elif [ "${{ matrix.target }}" == "loongarch64-unknown-linux-gnu" ]; then
            sudo apt-get install -y gcc-loongarch64-linux-gnu
          elif [ "${{ matrix.target }}" == "mips64-unknown-linux-gnuabi64" ]; then
            sudo apt-get install -y gcc-mips64-linux-gnuabi64
          elif [ "${{ matrix.target }}" == "powerpc64le-unknown-linux-gnu" ]; then
            sudo apt-get install -y gcc-powerpc64le-linux-gnu
          elif [ "${{ matrix.target }}" == "riscv64gc-unknown-linux-gnu" ]; then
            sudo apt-get install -y gcc-riscv64-linux-gnu
          elif [ "${{ matrix.target }}" == "s390x-unknown-linux-gnu" ]; then
            sudo apt-get install -y gcc-s390x-linux-gnu
          fi

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Archive binary
        run: |
          mkdir -p artifacts/${{ matrix.target }}
          cp target/${{ matrix.target }}/release/swu_network_custom_login artifacts/${{ matrix.target }}/
          cd artifacts/${{ matrix.target }}
          tar -czvf ../../${{ matrix.target }}.tar.gz *
          cd ../../

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: ${{ matrix.target }}.tar.gz

  build_macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        run: rustup target add ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Archive binary
        run: |
          mkdir -p artifacts/${{ matrix.target }}
          cp target/${{ matrix.target }}/release/swu_network_custom_login artifacts/${{ matrix.target }}/
          cd artifacts/${{ matrix.target }}
          tar -czvf ../../${{ matrix.target }}.tar.gz *
          cd ../../

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: ${{ matrix.target }}.tar.gz

  build_windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - i686-pc-windows-msvc
          - aarch64-pc-windows-msvc
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Archive binary
        run: |
          mkdir artifacts
          cd artifacts
          mkdir ${{ matrix.target }}
          cd ..
          copy target\${{ matrix.target }}\release\swu_network_custom_login.exe artifacts\${{ matrix.target }}\

          cd artifacts\${{ matrix.target }}
          tar -czvf ..\..\${{ matrix.target }}.tar.gz *
          cd ..\..

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: ${{ matrix.target }}.tar.gz

  release:
    needs:
      - build_linux
      - build_macos
      - build_windows
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "artifacts/**/*.tar.gz"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          name: Release ${{ github.ref }}
          draft: false
          prerelease: false
